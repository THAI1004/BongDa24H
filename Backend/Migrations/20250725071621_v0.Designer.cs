// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(BongDa24HContext))]
    [Migration("20250725071621_v0")]
    partial class v0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int?>("DepositAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeposited")
                        .HasColumnType("bit");

                    b.Property<int>("PitchId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Bookings__3214EC075AA1CD4F");

                    b.HasIndex(new[] { "PitchId" }, "IX_Bookings_PitchId");

                    b.HasIndex(new[] { "UserId" }, "IX_Bookings_UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Backend.Models.MatchRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("MatchDate")
                        .HasColumnType("date");

                    b.Property<int?>("PitchId")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__MatchReq__3214EC076C61D1BC");

                    b.HasIndex(new[] { "CreatorId" }, "IX_MatchRequests_CreatorId");

                    b.HasIndex(new[] { "PitchId" }, "IX_MatchRequests_PitchId");

                    b.ToTable("MatchRequests");
                });

            modelBuilder.Entity("Backend.Models.MatchResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ResponderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id")
                        .HasName("PK__MatchRes__3214EC070DACD176");

                    b.HasIndex(new[] { "RequestId" }, "IX_MatchResponses_RequestId");

                    b.HasIndex(new[] { "ResponderId" }, "IX_MatchResponses_ResponderId");

                    b.ToTable("MatchResponses");
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Messages__3214EC0711BA0588");

                    b.HasIndex(new[] { "BookingId" }, "IX_Messages_BookingId");

                    b.HasIndex(new[] { "ReceiverId" }, "IX_Messages_ReceiverId");

                    b.HasIndex(new[] { "SenderId" }, "IX_Messages_SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Backend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Payments__3214EC07BF2F04E3");

                    b.HasIndex(new[] { "BookingId" }, "IX_Payments_BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Backend.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("Facilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PitchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PitchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Pitches__3214EC070324212E");

                    b.HasIndex(new[] { "ClusterId" }, "IX_Pitches_ClusterId");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Backend.Models.PitchCluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClusterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__PitchClu__3214EC07413191A0");

                    b.HasIndex(new[] { "OwnerId" }, "IX_PitchClusters_OwnerId");

                    b.ToTable("PitchClusters");
                });

            modelBuilder.Entity("Backend.Models.PricingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PitchId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__PricingR__3214EC07673927EB");

                    b.HasIndex(new[] { "PitchId" }, "IX_PricingRules_PitchId");

                    b.ToTable("PricingRules");
                });

            modelBuilder.Entity("Backend.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK__Promotio__3214EC07B17FAE2F");

                    b.HasIndex(new[] { "ClusterId" }, "IX_Promotions_ClusterId");

                    b.HasIndex(new[] { "DiscountCode" }, "UQ__Promotio__A1120AF5A31A65A7")
                        .IsUnique();

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Reports__3214EC07E2BB0956");

                    b.HasIndex(new[] { "ReporterId" }, "IX_Reports_ReporterId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpponentAttitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OpponentRating")
                        .HasColumnType("int");

                    b.Property<string>("OpponentSkill")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PitchRating")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Reviews__3214EC0727D03501");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Reviews__73951AECCD141392")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Backend.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalMatches")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK__Teams__3214EC07FF40421D");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Teams_ManagerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccumulatedPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("User");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07D101141F");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D1053416EF43B0")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.HasOne("Backend.Models.Pitch", "Pitch")
                        .WithMany("Bookings")
                        .HasForeignKey("PitchId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Pitches");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Users");

                    b.Navigation("Pitch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.MatchRequest", b =>
                {
                    b.HasOne("Backend.Models.User", "Creator")
                        .WithMany("MatchRequests")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchRequests_Users");

                    b.HasOne("Backend.Models.Pitch", "Pitch")
                        .WithMany("MatchRequests")
                        .HasForeignKey("PitchId")
                        .HasConstraintName("FK_MatchRequests_Pitches");

                    b.Navigation("Creator");

                    b.Navigation("Pitch");
                });

            modelBuilder.Entity("Backend.Models.MatchResponse", b =>
                {
                    b.HasOne("Backend.Models.MatchRequest", "Request")
                        .WithMany("MatchResponses")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchResponses_MatchRequests");

                    b.HasOne("Backend.Models.User", "Responder")
                        .WithMany("MatchResponses")
                        .HasForeignKey("ResponderId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchResponses_Users");

                    b.Navigation("Request");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.HasOne("Backend.Models.Booking", "Booking")
                        .WithMany("Messages")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Bookings");

                    b.HasOne("Backend.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_ReceiverUser");

                    b.HasOne("Backend.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_SenderUser");

                    b.Navigation("Booking");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Backend.Models.Payment", b =>
                {
                    b.HasOne("Backend.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Bookings");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Backend.Models.Pitch", b =>
                {
                    b.HasOne("Backend.Models.PitchCluster", "Cluster")
                        .WithMany("Pitches")
                        .HasForeignKey("ClusterId")
                        .IsRequired()
                        .HasConstraintName("FK_Pitches_PitchClusters");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Backend.Models.PitchCluster", b =>
                {
                    b.HasOne("Backend.Models.User", "Owner")
                        .WithMany("PitchClusters")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_PitchClusters_Users");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Backend.Models.PricingRule", b =>
                {
                    b.HasOne("Backend.Models.Pitch", "Pitch")
                        .WithMany("PricingRules")
                        .HasForeignKey("PitchId")
                        .IsRequired()
                        .HasConstraintName("FK_PricingRules_Pitches");

                    b.Navigation("Pitch");
                });

            modelBuilder.Entity("Backend.Models.Promotion", b =>
                {
                    b.HasOne("Backend.Models.PitchCluster", "Cluster")
                        .WithMany("Promotions")
                        .HasForeignKey("ClusterId")
                        .HasConstraintName("FK_Promotions_PitchClusters");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.HasOne("Backend.Models.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_ReporterUser");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Backend.Models.Review", b =>
                {
                    b.HasOne("Backend.Models.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("Backend.Models.Review", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Bookings");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Backend.Models.Team", b =>
                {
                    b.HasOne("Backend.Models.User", "Manager")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK_Teams_Users");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Payments");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Backend.Models.MatchRequest", b =>
                {
                    b.Navigation("MatchResponses");
                });

            modelBuilder.Entity("Backend.Models.Pitch", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MatchRequests");

                    b.Navigation("PricingRules");
                });

            modelBuilder.Entity("Backend.Models.PitchCluster", b =>
                {
                    b.Navigation("Pitches");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MatchRequests");

                    b.Navigation("MatchResponses");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("PitchClusters");

                    b.Navigation("Reports");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
