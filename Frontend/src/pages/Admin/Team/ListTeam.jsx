import React, { useEffect, useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { TableCell, TableRow } from "@/components/ui/table"; // C·∫ßn cho renderRow
import axios from "axios";
// Ch·ªâ c·∫ßn import DataTable v√† Pagination t·ª´ Paginate.jsx
import { DataTable, Pagination } from "@/components/Paginate";
import { Link } from "react-router-dom";

export default function ListTeam() {
    const BEURL = import.meta.env.VITE_BEURL;
    const [loading, setLoading] = useState(false);
    const [team, setTeam] = useState([]);
    console.log("üöÄ ~ ListTeam ~ team:", team);
    const token = localStorage.getItem("token");
    const [error, setError] = useState("");

    // ------------------------------------------------
    // LOGIC PH√ÇN TRANG
    // ------------------------------------------------
    const ITEMS_PER_PAGE = 7; // C√≥ th·ªÉ ƒë·∫∑t l√† h·∫±ng s·ªë ho·∫∑c d√πng useState/Select
    const [currentPage, setCurrentPage] = useState(1);

    // T√≠nh to√°n t·ªïng s·ªë trang
    const totalPages = Math.ceil(team.length / ITEMS_PER_PAGE);

    // L·∫•y d·ªØ li·ªáu cho trang hi·ªán t·∫°i
    const currentItems = useMemo(() => {
        const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
        const endIndex = startIndex + ITEMS_PER_PAGE;
        return team.slice(startIndex, endIndex);
    }, [currentPage, team]);
    // users ƒë∆∞·ª£c th√™m v√†o dependency v√¨ d·ªØ li·ªáu c√≥ th·ªÉ thay ƒë·ªïi sau khi g·ªçi API

    const handlePageChange = (page) => {
        if (page >= 1 && page <= totalPages) {
            setCurrentPage(page);
        }
    };
    // ------------------------------------------------

    useEffect(() => {
        setLoading(true);
        const fetchTeam = async () => {
            try {
                const response = await axios.get(`${BEURL}/team`, {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });
                const teamData = response?.data?.data || [];
                setTeam(teamData);
                if (teamData.length === 0) {
                    setError("Danh s√°ch ƒë·ªôi tr·ªëng.");
                } else {
                    setError("");
                }
            } catch (error) {
                console.error("L·ªói khi t·∫£i ƒë·ªôi b√≥ng:", error);
                setError("ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu.");
            } finally {
                setLoading(false);
            }
        };
        fetchTeam();
    }, [BEURL, token]);
    const handleDelete = async (id) => {
        setLoading(true);
        try {
            const response = await axios.delete(`${BEURL}/team/${id}`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            if (response == null) {
                setLoading(false);
                setError("kh√¥ng th·ªÉ x√≥a ƒë·ªôi.");
            }
            setTeam((prev) => prev.filter((t) => t.id !== id));
        } catch (error) {
            setError(error);
        } finally {
            setLoading(false);
        }
    };
    // ƒê·ªãnh nghƒ©a Header cho b·∫£ng
    const teamTableHeaders = [
        { label: "ID", className: "w-[50px]" },
        { label: "T√™n ƒë√¥i", className: "" },
        { label: "Qu·∫£n l√Ω", className: "" },
        { label: "S·ªë tr·∫≠n ƒë√°", className: "" },
        { label: "S·ªë tr·∫≠n th·∫Øng", className: "text-center w-[80px]" },
        { label: "Thao t√°c", className: "text-center w-[150px]" },
    ];

    // H√†m render t·ª´ng h√†ng (row)
    const renderTeamRow = (team) => (
        <TableRow key={team.id}>
            <TableCell className="font-medium">{team.id}</TableCell>
            <TableCell>{team.teamName}</TableCell>
            <TableCell>{team.manager.fullName}</TableCell>
            <TableCell>{team.totalMatches}</TableCell>
            <TableCell className="text-center">{team.wins}</TableCell>
            <TableCell className="text-center gap-1 justify-center flex">
                <Link to={`/admin/team/${team.id}`}>
                    <Button className={"bg-blue-500 hover:bg-blue-600 hover:text-white"} variant="ghost" size="sm">
                        Chi ti·∫øt
                    </Button>
                </Link>
                <Button
                    handle={() => {
                        handleDelete(team.id);
                    }}
                    className={"bg-red-500 hover:bg-red-600 hover:text-white"}
                    variant="ghost"
                    size="sm"
                >
                    x√≥a
                </Button>
            </TableCell>
        </TableRow>
    );

    return (
        <div className="p-2">
            <div className="flex justify-between items-center mb-4">
                <h1 className="text-2xl font-sans font-medium">Danh s√°ch ƒë·ªôi b√≥ng</h1>
                <Button className="bg-blue-600 hover:bg-blue-700" variant="default">
                    Th√™m m·ªõi
                </Button>
            </div>

            {loading && <p className="text-center py-4">ƒêang t·∫£i d·ªØ li·ªáu...</p>}
            {error && <p className="text-center py-4 text-red-500">{error}</p>}

            {!loading && !error && team.length > 0 && (
                <DataTable
                    headers={teamTableHeaders}
                    data={currentItems} // Truy·ªÅn d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ph√¢n trang
                    renderRow={renderTeamRow}
                    totalItems={team.length}
                    currentPage={currentPage}
                    totalPages={totalPages}
                    onPageChange={handlePageChange}
                />
            )}
        </div>
    );
}
